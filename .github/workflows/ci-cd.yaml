#This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

# For deployment, it will be necessary to create a PyPI API token and store it as a secret
# https://docs.github.com/en/actions/reference/encrypted-secrets

name: CI/CD

on:
  release:
    types: [published]
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


permissions:
  contents: read
  pages: write
  id-token: write

env: # Define environment variables
  SCIGET_NAME: ants
  SCIGET_VERSION: 2.6.0
  FORCE_COLOR: true
jobs:

  build:
    name: Build & verify package
    runs-on: ubuntu-latest
    permissions:
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: hynek/build-and-inspect-python-package@v2
        with:
          attest-build-provenance-github: ${{ github.event_name != 'pull_request' }}

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.13']
      fail-fast: false

    steps:

    - name: Removed unnecessary tools to free space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install Apptainer and Lmod
      run: |
        sudo add-apt-repository -y ppa:apptainer/ppa
        sudo apt-get update
        sudo apt-get install -y lmod apptainer

    - name: Install Neurocommand
      run: |
        git clone https://github.com/NeuroDesk/neurocommand.git
        pushd neurocommand
        pip3 install -r neurodesk/requirements.txt --user
        bash build.sh --cli
        echo "APPTAINER_BINDPATH=`pwd -P`" >> $GITHUB_ENV

        source /etc/profile.d/lmod.sh
        ./containers.sh "${{ env.SCIGET_NAME }}" | grep -E "^\s*\|\s*${{ env.SCIGET_NAME }}\s*\|\s*${{ env.SCIGET_VERSION }}\s*\|" | awk -F '|' '{gsub(/ /,"",$4); print $4}'
        SCIGET_BUILDVERSION=$(./containers.sh "${{ env.SCIGET_NAME }}" | grep -E "^\s*\|\s*${{ env.SCIGET_NAME }}\s*\|\s*${{ env.SCIGET_VERSION }}\s*\|" | awk -F '|' '{gsub(/ /,"",$4); print $4}')

        ./local/fetch_containers.sh ${{ env.SCIGET_NAME }} ${{ env.SCIGET_VERSION }} $SCIGET_BUILDVERSION
        echo "SCIGET_BUILDVERSION=$SCIGET_BUILDVERSION" >> $GITHUB_ENV
        popd

    # - name: Create ANTs install directory
    #   run: |
    #     sudo mkdir -p ${{ env.ANTS_INSTALL_PATH }}
    #     sudo chown $USER ${{ env.ANTS_INSTALL_PATH }}

    # - name: Cache ANTs Install
    #   id: cache-install
    #   uses: actions/cache@v4
    #   with:
    #     path: ${{ env.ANTS_INSTALL_PATH }}
    #     key: ants-${{ env.ANTS_VERSION }}-${{ runner.os }}

    # - name: Install ANTs Package
    #   if: steps.cache-install.outputs.cache-hit != 'true'
    #   run: |
    #     pushd ~
    #     git clone https://github.com/ANTsX/ANTs.git
    #     pushd ./ANTs
    #     git checkout ${{ env.ANTS_VERSION }}
    #     popd
    #     mkdir build install
    #     cd build
    #     cmake -DCMAKE_INSTALL_PREFIX=${{ env.ANTS_INSTALL_PATH }} ../ANTs
    #     make -j 4
    #     cd ANTS-build
    #     make install
    #     echo "Installation completed successfully"
    #     echo "PATH=${{ env.ANTS_INSTALL_PATH }}/bin:$PATH" >> $GITHUB_ENV
    #     echo "LD_LIBRARY_PATH=${{ env.ANTS_INSTALL_PATH }}/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    #     popd

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v6
    - name: Install tox
      run: |
        uv tool install tox --with=tox-uv --with=tox-gh-actions
    - name: Show tox config
      run: tox c
    - name: Run tox
      run: |
        source /etc/profile.d/lmod.sh
        module use $PWD/neurocommand/local/containers/modules/
        module load ${{ env.SCIGET_NAME }}/${{ env.SCIGET_VERSION }}
        tox -v --exit-and-dump-after 1200

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}


  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      attestations: write
      id-token: write
    steps:
    - name: Download dist
      uses: actions/download-artifact@v4
      with:
        name: Packages
        path: dist
    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

# Deploy on tags if PYPI_API_TOKEN is defined in the repository secrets.
# Secrets are not accessible in the if: condition [0], so set an output variable [1]
# [0] https://github.community/t/16928
# [1] https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter
